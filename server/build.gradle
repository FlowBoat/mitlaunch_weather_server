group 'io.github.flowboat.flowweather'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlinx-serialization'
apply plugin: 'application'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "http://dl.bintray.com/kotlin/ktor" }
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }
    maven { url "https://dl.bintray.com/kotlin/exposed" }
}

mainClassName = "io.github.flowboat.flowweather.server.FWServer"

dependencies {
    //Include shared code
    compile project(":shared")

    //DI
    compile 'com.github.salomonbrys.kodein:kodein:4.1.0'
    compile 'com.github.salomonbrys.kodein:kodein-conf:4.1.0'

    //DB
    compile 'org.jetbrains.exposed:exposed:0.8.6'
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.20.1'
    compile group: 'mysql', name: 'mysql-connector-java', version: '6.0.6'

    //Web
    compile "org.jetbrains.ktor:ktor-core:$ktor_version"
    compile "org.jetbrains.ktor:ktor-netty:$ktor_version"

    //Serialization
    compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'

    //Logging
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'

    //Kotlin
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

//Set application run dir
def runningDir = new File("build/app-run")
runningDir.mkdirs()
tasks.run.workingDir = runningDir

task copyWebUI {
    doLast {
        def targetFolder = new File("src/main/resources/webui")

        delete {
            delete targetFolder
        }

        //Copy JS
        copy {
            from "${project(":webui").projectDir.absolutePath}/build/web"
            into targetFolder
        }
    }
}

copyWebUI.dependsOn project(":webui").getTasksByName("assembleWeb", false)
processResources.dependsOn copyWebUI